{"version":3,"sources":["Actions/index.ts","Models/interfaces/index.ts","Models/modules/Game.ts","Components/Cell/index.tsx","Components/Board/index.tsx","Components/Game/Components/EndGameView.tsx","Components/Game/Components/StartGameView.tsx","Components/Game/index.tsx","App.tsx","reportWebVitals.ts","Reducers/index.ts","react-redux.ts","index.tsx"],"names":["ActionTypes","Player","GameStatus","CellState","ActionCreators","type","STOP_LOADING","START_LOADING","START_GAME","END_GAME","player","TOGGLE_PLAYER_TURN","board","MAKE_MOVE","winner","SET_WINNER","prevSteps","ADD_PREV_MOVES","RESET_GAME","Game","getWinner","i","EMPTY","j","isGameLeft","makeMove","turn","newBoard","Error","undoPrevStep","prevStep","length","lastStep","pop","CellView","props","className","onClick","cell","BoardView","boardOutput","flat","map","index","Cell","key","Math","floor","onCellClick","onUndoButtonClick","EndGameView","resetGame","StartGameView","GameView","dispatch","useDispatch","playerMap","Player_1","O","Player_2","X","useSelector","state","gameStatus","loading","startGame","setTimeout","getNextTurn","winnerStatus","steps","push","err","console","error","res","onResetButtonClick","IN_PROGRESS","Board","COMPLETED","NOT_STARTED","getGameView","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","Array","fill","_","store","createStore","action","UNDO_LAST_STEP","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae184ccc.chunk.js","sourcesContent":["import {Action, Dispatch} from 'redux'\nimport { CellState, Coordinate, Player } from '../Models/interfaces'\n\nexport enum ActionTypes  {\n    START_GAME ='START_GAME',\n    END_GAME = 'END_GAME',\n    TOGGLE_PLAYER_TURN = 'TOGGLE_PLAYER_TURN',\n    START_LOADING = 'START_LOADING',\n    STOP_LOADING = 'STOP_LOADING',\n    MAKE_MOVE = 'MAKE_MOVE',\n    SET_WINNER = 'SET_WINNER',\n    UNDO_LAST_STEP = 'UNDO_LAST_STEP',\n    ADD_PREV_MOVES = 'ADD_PREV_MOVES',\n    RESET_GAME = 'RESET_GAME'\n}\n\nexport type StartGameAction = Action<ActionTypes.START_GAME>\nexport type EndGameAction = Action<ActionTypes.END_GAME>\nexport type TooglePlayerTurnAction = Action<ActionTypes.TOGGLE_PLAYER_TURN> & {\n    player: Player\n}\n\nexport type MakeMoveAction = Action<ActionTypes.MAKE_MOVE> & {\n    board: CellState[][]\n}\n\nexport type UndoLastStepAction = Action<ActionTypes.UNDO_LAST_STEP> & {\n    board: CellState[][],\n}\n\nexport type AddPrevStepAction = Action<ActionTypes.ADD_PREV_MOVES> & {\n    prevSteps: Coordinate[]\n}\n\nexport type StartLoaderAction = Action<ActionTypes.START_LOADING>\nexport type StopLoaderAction = Action<ActionTypes.STOP_LOADING>\n\nexport type SetWinnerAction = Action<ActionTypes.SET_WINNER> & {\n    winner : Player\n}\n\nexport type ResetGameAction = Action<ActionTypes.RESET_GAME>\n\n\nexport type Actions = StartGameAction | EndGameAction | TooglePlayerTurnAction | StartLoaderAction | StopLoaderAction | MakeMoveAction | SetWinnerAction | UndoLastStepAction | AddPrevStepAction | ResetGameAction\n\n\nexport const ActionCreators = {\n    stopLoading: () => {\n        const stopLoaderAction : StopLoaderAction = {\n            type: ActionTypes.STOP_LOADING\n        }\n        return stopLoaderAction\n    },\n    startLoading : () => {\n        const startLoaderAction : StartLoaderAction = {\n            type: ActionTypes.START_LOADING\n        }\n        return startLoaderAction\n    },\n    startGame: () => {\n            const startGameAction : StartGameAction = {\n                type: ActionTypes.START_GAME\n            }\n            return startGameAction\n        \n    },\n    endGame : () =>  {\n            const endGameAction : EndGameAction = {\n                type: ActionTypes.END_GAME\n            }\n            return endGameAction\n        \n    },\n    togglePlayerTurn: (player: Player) => {\n            const togglePlayerTurnAction: TooglePlayerTurnAction = {\n                type: ActionTypes.TOGGLE_PLAYER_TURN,\n                player\n            }\n            return togglePlayerTurnAction\n        \n    },\n    makeMove : (board: CellState[][]) => {\n        const makeMoveAction : MakeMoveAction = {\n            type : ActionTypes.MAKE_MOVE,\n            board\n        } \n        return makeMoveAction\n    },\n    setWinner : (winner: Player) => {\n        const setWinnerAction : SetWinnerAction = {\n            type: ActionTypes.SET_WINNER,\n            winner\n        }\n        return setWinnerAction\n    },\n    undoLastMove: (board: CellState[][]) => {\n\n        const undoLastMoveAction : UndoLastStepAction = {\n            type: ActionTypes.UNDO_LAST_STEP,\n            board\n        }\n        return undoLastMoveAction\n    },\n    pushPrevSteps: (prevSteps:Coordinate[]) => {\n        const addPrevStepAction : AddPrevStepAction = {\n            type: ActionTypes.ADD_PREV_MOVES,\n            prevSteps\n            \n        }\n        return addPrevStepAction\n    },\n    resetGame : () => {\n        const resetGameAction: ResetGameAction  = {\n            type: ActionTypes.RESET_GAME\n        }\n        return resetGameAction\n    }\n}","\n\nexport enum Player {\n    Player_1 = 'PLAYER_1',\n    Player_2 = 'PLAYER_2'\n}\n\nexport enum GameStatus {\n    COMPLETED ='COMPLETED',\n    IN_PROGRESS = 'IN_PROGRESS',\n    NOT_STARTED = 'NOT_STARTED'\n}\n\nexport enum CellState {\n    X = 'X',\n    O = 'O',\n    EMPTY = ''\n}\n\nexport interface Coordinate {\n    i : number,\n    j : number\n}","import { CellState, Coordinate, Player } from \"../interfaces\";\n\n\nexport class Game {\n    \n    static getWinner = (board: CellState[][]) : CellState => {\n\n        for(let i =0;i<3;i++) {\n            if(board[i][0]!=CellState.EMPTY && board[i][1] == board[i][0] && board[i][1] == board[i][2]) return board[i][0]\n        }\n\n        for(let j = 0;j<3;j++) {\n            if(board[0][j]!=CellState.EMPTY && board[1][j] == board[0][j] && board[1][j] == board[2][j]) return board[0][j]\n        }\n\n        if(board[0][0]!= CellState.EMPTY && board[1][1] == board[0][0] && board[1][1] == board[2][2]) return board[0][0];\n\n        if(board[2][0] != CellState.EMPTY &&  board[1][1] == board[2][0] && board[1][1] == board[0][2]) return board[0][2];\n\n        return CellState.EMPTY\n    }\n\n    static isGameLeft = (board: CellState[][]) : boolean => {\n        for(let i =0;i<3;i++) {\n            for(let j = 0;j<3;j++) {\n                if(board[i][j] == CellState.EMPTY) return true\n            }\n        }\n        return false\n    }\n\n\n    static makeMove =(board: CellState[][], i : number, j : number, turn : CellState) : CellState[][] => {\n        if(i >=0 && j>=0 &&  i< 3 && j<3) {\n            const newBoard = [...board];\n            newBoard[i][j] = turn\n            return newBoard\n        }else {\n            throw new Error(\"Invalid coordinates\")\n        }\n\n    }\n\n    static undoPrevStep = (board: CellState[][], prevStep: Coordinate[]) : {board: CellState[][], prevStep: Coordinate[]} => {\n        if(!prevStep.length) return {board, prevStep}\n        let lastStep = prevStep.pop()\n        if(!lastStep) return {board, prevStep};\n        const {i,j} = lastStep\n        if(i>=0 && j>=0  && i <3 && j <3) {\n            board[i][j] = CellState.EMPTY;\n            return {board, prevStep}\n        }else {\n            throw new Error(\"Invalid coordinates\")\n        }\n\n    }\n\n\n    \n\n}","import React from 'react'\nimport { CellState } from '../../Models/interfaces'\nimport { ICellView } from './interface'\n\nconst CellView:React.FC<ICellView> = (props) => {\n\n    const cellClickHandler = () => {\n        props.cell === CellState.EMPTY && props.onClick()\n    }\n    return (\n        <div className=\"bg-white h-12 cursor-pointer flex justify-center items-center\" onClick={cellClickHandler}>{props.cell}</div>\n    )\n}\n\n\nexport default CellView","\nimport React from 'react'\nimport CellView from '../Cell'\nimport { IBoardView } from './interface'\n\n\nconst BoardView:React.FC<IBoardView> = (props) => {\n\n   \n    const cellClickHandler = (key : number) => {\n        return () => {\n            const i = Math.floor(key/3);\n            const j = key%3;\n            props.onCellClick(i,j)\n        }\n    }\n\n    const undoClickHandler = () => {\n            props.onUndoButtonClick()\n        \n    }\n    \n\n    let boardOutput = props.board.flat().map((cell, index) => (<CellView key={index} cell={cell}\n         onClick={cellClickHandler(index)}/>))\n\n    \n    return (\n        <div className=\"text-center\t\" data-testid='board'>\n        <div className=\"grid grid-cols-3 bg-gray-500 gap-2 \" >\n            {boardOutput}\n        </div>\n        <button onClick={undoClickHandler} className=\"mt-6 bg-gray-300\tpx-4 py-2\">\n            Undo\n        </button>\n        </div>\n    )\n}\n\n\nexport default BoardView","import React from 'react'\nimport { Player } from '../../../Models/interfaces'\n\nexport interface IEndGameView {\n    winner: Player | null,\n    resetGame: () => void\n}\n\nconst EndGameView:React.FC<IEndGameView> = (props) => {\n\n    return (\n        <div>\n            <h1>{!!props.winner ? `Winner is ${props.winner}` : `Draw`}</h1>\n            <button onClick={props.resetGame} className=\"mt-6 bg-gray-300\tpx-4 py-2\">Reset</button>\n        </div>\n    )\n}\n\nexport default EndGameView","import React from 'react'\n\n\nexport interface IStartGameView {\n    onClick: () =>void\n}\n\n\n\n\nconst StartGameView:React.FC<IStartGameView> = (props) => {\n    return (\n        <div>\n        <button onClick={props.onClick} className=\"mt-6 bg-gray-300\tpx-4 py-2\">Start game</button>\n        </div>\n    )\n}\n\n\nexport default StartGameView","import React, { Suspense, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ActionCreators } from '../../Actions'\nimport { CellState, GameStatus, Player } from '../../Models/interfaces'\nimport { Game } from '../../Models/modules/Game'\nimport { GlobalState } from '../../Reducers'\nimport BoardView from '../Board'\nimport EndGameView from './Components/EndGameView'\nimport StartGameView from './Components/StartGameView'\n\nconst GameView = () => {\n\n    const dispatch = useDispatch()\n\n    const playerMap = {\n        [Player.Player_1]: CellState.O,\n        [Player.Player_2]: CellState.X,\n    }\n\n\n    const {board, gameStatus,turn,winner,loading,prevStep} = useSelector((state: GlobalState) => {\n         return {\n            ...state\n         }\n    })\n\n    const startGame = () => {\n        dispatch(ActionCreators.startLoading())\n        setTimeout(() => {\n            // For demo purpose\n            dispatch(ActionCreators.stopLoading())\n            dispatch(ActionCreators.startGame())\n        }, 2000)\n        \n    }\n\n    const getNextTurn = (player: Player) => player == Player.Player_1 ? Player.Player_2 : Player.Player_1\n\n    const onCellClick = (i: number, j: number) => {\n        try {\n            const newBoard = Game.makeMove(board,i,j,playerMap[turn])\n            const winnerStatus = Game.getWinner(newBoard);\n            if(winnerStatus !=CellState.EMPTY) {\n                const winner = winnerStatus === CellState.O ? Player.Player_1 : Player.Player_2\n                dispatch(ActionCreators.setWinner(winner))\n                dispatch(ActionCreators.endGame())\n\n            }\n\n            if(!Game.isGameLeft(board)) {\n                // no winnder\n                dispatch(ActionCreators.endGame())\n            }\n            dispatch(ActionCreators.makeMove(newBoard))\n            const steps = [...prevStep]\n            steps.push({i,j})\n            dispatch(ActionCreators.pushPrevSteps(steps))\n            dispatch(ActionCreators.togglePlayerTurn(getNextTurn(turn)))\n        }catch(err) {\n            console.error(err)\n        }\n    }\n\n    const onUndoButtonClick = () => {\n        try {\n\n            const res = Game.undoPrevStep(board,prevStep)\n            dispatch(ActionCreators.makeMove(res.board))\n            dispatch(ActionCreators.pushPrevSteps(res.prevStep))\n            dispatch(ActionCreators.togglePlayerTurn(getNextTurn(turn)))\n        }catch(err) {\n            console.error(err)\n        }\n    }\n\n    const onResetButtonClick = () => {\n        dispatch(ActionCreators.resetGame())\n    }\n\n    const getGameView = (gameStatus : GameStatus) => {\n        switch(gameStatus) {\n            case GameStatus.IN_PROGRESS:\n                return <BoardView board={board} onCellClick={onCellClick} onUndoButtonClick={onUndoButtonClick} />\n            case GameStatus.COMPLETED:\n                return <EndGameView winner={winner} resetGame={onResetButtonClick}/>\n            case GameStatus.NOT_STARTED:\n                return <StartGameView onClick={startGame}/>\n        }\n    }\n\n    \n\n    return (\n            <div className=\"flex justify-center\titems-center h-screen\tw-screen\">\n\n            {!loading ? (\n                    <div className=\"w-60 text-center\">\n                     {getGameView(gameStatus)}\n                    </div>\n                    \n            ) : (\n                <h1>Loading</h1>\n            )}\n            </div>\n\n    )\n}\n\nexport default GameView","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useDispatch } from 'react-redux';\nimport { ActionTypes } from './Actions';\nimport Game from './Components/Game';\n\nfunction App() {  \n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Actions, ActionTypes } from \"../Actions\"\nimport { CellState, Coordinate, GameStatus, Player } from \"../Models/interfaces\"\n\n\n\nexport interface GlobalState {\n    loading:boolean,\n    turn: Player,\n    gameStatus: GameStatus,\n    winner: Player | null,\n    board: CellState[][],\n    prevStep : Coordinate[]\n}\n\nexport const initialState : GlobalState = {\n    loading : false,\n    turn : Player.Player_1,\n    gameStatus: GameStatus.NOT_STARTED,\n    winner: null,\n    board: new Array(3).fill([]).map((_) => new Array(3).fill(CellState.EMPTY)),\n    prevStep: []\n}\n\n\nexport const rootReducer = (state: GlobalState = initialState, action: Actions) : GlobalState => {\n    switch(action.type) {\n        case ActionTypes.END_GAME:\n            return {...state, gameStatus: GameStatus.COMPLETED}\n        case ActionTypes.START_GAME:\n            return {...state, gameStatus: GameStatus.IN_PROGRESS}\n        case ActionTypes.TOGGLE_PLAYER_TURN:\n            return {...state, turn: action.player}\n        case ActionTypes.START_LOADING:\n            return {...state, loading: true}\n        case ActionTypes.STOP_LOADING:\n            return {...state, loading: false}\n        case ActionTypes.MAKE_MOVE:\n            return {...state, board: action.board}\n        case ActionTypes.UNDO_LAST_STEP:\n            return {...state, board: action.board}\n        case ActionTypes.SET_WINNER:\n            return {...state,winner: action.winner}\n        case ActionTypes.ADD_PREV_MOVES:\n            return {...state, prevStep: action.prevSteps}\n        case ActionTypes.RESET_GAME:\n            return {...initialState,board: new Array(3).fill([]).map((_) => new Array(3).fill(CellState.EMPTY))}\n        default:\n            return {...state}\n\n\n    }\n}","import { createStore } from \"redux\";\nimport { rootReducer } from \"./Reducers\";\n\n\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n    <App />\n   </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}